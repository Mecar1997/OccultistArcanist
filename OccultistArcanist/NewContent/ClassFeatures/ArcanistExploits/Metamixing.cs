using Epic.OnlineServices;
using HarmonyLib;
using System.Collections.Generic;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.Classes.Selection;
using Kingmaker.Blueprints.Classes;
using Kingmaker.Designers.EventConditionActionSystem.Actions;
using Kingmaker.Enums;
using Kingmaker.RuleSystem;
using Kingmaker.UnitLogic.Abilities.Blueprints;
using Kingmaker.UnitLogic.Abilities.Components;
using Kingmaker.UnitLogic.FactLogic;
using Kingmaker.UnitLogic.Mechanics.Actions;
using Kingmaker.UnitLogic.Mechanics.Components;
using Kingmaker.UnitLogic.Mechanics;
using TabletopTweaks.Core.ModLogic;
using TabletopTweaks.Core.Utilities;
using static UnityModManagerNet.UnityModManager;
using System.Linq;
using Kingmaker.Blueprints.Classes.Prerequisites;
using Kingmaker.Designers.Mechanics.Facts;
using Kingmaker.Utility;
using Kingmaker.Blueprints.Items.Weapons;
using Kingmaker.Designers.Mechanics.Buffs;
using Kingmaker.UnitLogic.Buffs.Blueprints;
using UnityEngine;
using Kingmaker.EntitySystem.Stats;
using Kingmaker.UnitLogic.ActivatableAbilities;
using static Kingmaker.UnitLogic.ActivatableAbilities.ActivatableAbilityResourceLogic;
using OccultistArcanist.NewComponents;

namespace OccultistArcanist.NewContent.ArcanistExploits
{
    public static class Metamixing
    {
        static BlueprintCharacterClass arcanist_class = BlueprintTools.GetBlueprint<BlueprintCharacterClass>("52dbfd8505e22f84fad8d702611f60b7");
        static BlueprintFeature exploit;

        static string guid_name = "MetamixingExploit";
        static string name = "Metamixing";
        static string description = "The arcanist can expend 1 point from her arcane reservoir to cast a spell with one spontaneously applied metamagic feat without affecting the casting time.";

        static Sprite icon = AssetLoader.LoadInternal(Main.HaddeqiModContext, folder: "Icons", file: "Metamixing.png");
        static internal void load()
        {
            var arcane_reservoir_resource = BlueprintTools.GetBlueprint<BlueprintAbilityResource>("cac948cbbe79b55459459dd6a8fe44ce");
            //var icon = AssetLoader.LoadInternal(Main.HaddeqiModContext, folder: "Abilities", file: "Metamixing.png");


            var buff = Helpers.CreateBlueprint<BlueprintBuff>(Main.HaddeqiModContext, guid_name + "Buff", bp => {
                bp.m_Icon = icon;
                bp.SetName(name);
                bp.SetDescription(description);
                bp.AddComponent<ArcanistMetamixing>(a => { a.class_to_use = arcanist_class; a.resource = arcane_reservoir_resource; });
            });

            var ability = Helpers.CreateBlueprint<BlueprintActivatableAbility>(Main.HaddeqiModContext, guid_name + "ToggleAbility", bp => {
                bp.m_Icon = icon;
                bp.SetName(name);
                bp.SetDescription(description);
                bp.m_Buff = buff.ToReference<BlueprintBuffReference>();
                bp.IsOnByDefault = false;
                bp.DoNotTurnOffOnRest = true;
                bp.DeactivateImmediately = true;
                bp.ActivationType = AbilityActivationType.Immediately;
                bp.m_ActivateWithUnitCommand = Kingmaker.UnitLogic.Commands.Base.UnitCommand.CommandType.Free;
                bp.AddComponent(Utils.CreateActivatableResourceLogic(arcane_reservoir_resource, ResourceSpendType.Never));
            });

            exploit = Helpers.CreateBlueprint<BlueprintFeature>(Main.HaddeqiModContext, guid_name + "Feature", bp => {
                bp.IsClassFeature = true;
                bp.HideInUI = true;
                bp.ReapplyOnLevelUp = true;
                bp.Ranks = 1;
                bp.m_Icon = icon;
                bp.SetName(name);
                bp.SetDescription(description);
                bp.AddComponent<AddFacts>(c => {
                    c.m_Facts = new BlueprintUnitFactReference[] {
                        ability.ToReference<BlueprintUnitFactReference>(),
                    };
                });
            });


            FeatTools.AddAsArcanistExploit(exploit);
            var extra_exploit = BlueprintTools.GetBlueprint<BlueprintFeatureSelection>("8ecee479c6d04c73926c4d95345b9314");
            extra_exploit.AddFeatures(exploit);
        }


    }
}
