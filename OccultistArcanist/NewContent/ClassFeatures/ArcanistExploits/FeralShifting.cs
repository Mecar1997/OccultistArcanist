using Epic.OnlineServices;
using HarmonyLib;
using System.Collections.Generic;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.Classes.Selection;
using Kingmaker.Blueprints.Classes;
using Kingmaker.Designers.EventConditionActionSystem.Actions;
using Kingmaker.Enums;
using Kingmaker.RuleSystem;
using Kingmaker.UnitLogic.Abilities.Blueprints;
using Kingmaker.UnitLogic.Abilities.Components;
using Kingmaker.UnitLogic.FactLogic;
using Kingmaker.UnitLogic.Mechanics.Actions;
using Kingmaker.UnitLogic.Mechanics.Components;
using Kingmaker.UnitLogic.Mechanics;
using TabletopTweaks.Core.ModLogic;
using TabletopTweaks.Core.Utilities;
using static UnityModManagerNet.UnityModManager;
using System.Linq;
using Kingmaker.Blueprints.Classes.Prerequisites;
using Kingmaker.Designers.Mechanics.Facts;
using Kingmaker.Utility;
using Kingmaker.Blueprints.Items.Weapons;
using Kingmaker.Designers.Mechanics.Buffs;
using Kingmaker.UnitLogic.Buffs.Blueprints;
using UnityEngine;
using Kingmaker.EntitySystem.Stats;

namespace OccultistArcanist.NewContent.ArcanistExploits
{
    public static class FeralShifting
    {
        static BlueprintCharacterClass arcanist_class = BlueprintTools.GetBlueprint<BlueprintCharacterClass>("52dbfd8505e22f84fad8d702611f60b7");
        static BlueprintFeature exploit;

        static string guid_name = "FeralShifting";
        static string name = "Feral Shifting";
        static string description = "As a swift action, the arcanist can spend 1 point from her arcane reservoir to gain either a bite attack that deals 1d6 points of damage (1d4 points of damage if she is Small) or two claw attacks that deal 1d4 points of damage (1d3 points of damage if she is Small) for a number of minutes equal to her Charisma modifier (minimum 1).";

        static Sprite icon = BlueprintTools.GetBlueprint<BlueprintFeature>("25954b1652bebc2409f9cb9d5728bceb").Icon;

        static Sprite icon_claws = BlueprintTools.GetBlueprint<BlueprintFeature>("e17698ef77dc3174cbd0a42422c22441").Icon;


        static internal void load()
        {
            var arcane_reservoir_resource = BlueprintTools.GetBlueprint<BlueprintAbilityResource>("cac948cbbe79b55459459dd6a8fe44ce");
            var arcane_barrier_ability = BlueprintTools.GetBlueprint<BlueprintAbility>("fff22537035652b48b9359b0a3de5f2e");


            var weapon_claws = BlueprintTools.GetBlueprint<BlueprintItemWeapon>("58ebe08a00e05ab4a9d1926fe5408454");
            var animal_fury_bite = BlueprintTools.GetBlueprint<BlueprintItemWeapon>("8c01e7fccbb829947bc5894f63fb389a");

            var feral_shifting_bite = animal_fury_bite.CreateCopy(Main.HaddeqiModContext, guid_name + "Bite", bp => {
                bp.SetName(Main.HaddeqiModContext, "Bite (Feral Shifting)");
                bp.m_DamageDice = new DiceFormula(1, DiceType.D6);
            });

            var feral_shifting_claws = weapon_claws.CreateCopy(Main.HaddeqiModContext, guid_name + "Claws", bp => {
                bp.SetName(Main.HaddeqiModContext, "Claws (Feral Shifting)");
                bp.m_DamageDice = new DiceFormula(1, DiceType.D4);
                bp.m_Icon = icon_claws;
            });


            var bite_buff = Helpers.CreateBlueprint<BlueprintBuff>(Main.HaddeqiModContext, guid_name + "BiteBuff", bp => {
                bp.m_Icon = icon;
                bp.SetName(name);
                bp.SetDescription(description);
                bp.AddComponent<AddSecondaryAttacks>(a => a.m_Weapon = new BlueprintItemWeaponReference[] { feral_shifting_bite.ToReference<BlueprintItemWeaponReference>() });
            });

            var claws_buff = Helpers.CreateBlueprint<BlueprintBuff>(Main.HaddeqiModContext, guid_name + "ClawsBuff", bp => {
                bp.SetName(name);
                bp.SetDescription(description);
                bp.AddComponent<EmptyHandWeaponOverride>(a => a.m_Weapon = feral_shifting_claws.ToReference<BlueprintItemWeaponReference>());
                bp.m_Icon = icon_claws;
            });


            var claws_ability = arcane_barrier_ability.CreateCopy(Main.HaddeqiModContext, guid_name + "ClawsAbility", bp => {
                bp.m_Icon = icon_claws;
                bp.SetName(name + " (Claws)");
                bp.SetDescription(description);
                bp.SetComponents(Helpers.Create<AbilityResourceLogic>(c => {
                    c.m_RequiredResource = arcane_reservoir_resource.ToReference<BlueprintAbilityResourceReference>();
                    c.m_IsSpendResource = true;
                    c.Amount = 1;
                    c.ResourceCostDecreasingFacts = new List<BlueprintUnitFactReference>();
                    c.ResourceCostIncreasingFacts = new List<BlueprintUnitFactReference>();
                }),
                Helpers.CreateContextRankConfig(baseValueType: ContextRankBaseValueType.StatBonus, stat: StatType.Charisma, min: 1));
                bp.AddComponent<AbilityEffectRunAction>(c => {
                    c.Actions = Helpers.CreateActionList(
                        new ContextActionApplyBuff()
                        {
                            IsNotDispelable = true,
                            DurationValue = new ContextDurationValue()
                            {
                                Rate = DurationRate.Minutes,
                                BonusValue = new ContextValue()
                                {
                                    ValueType = ContextValueType.Rank
                                },
                                DiceCountValue = new ContextValue(),
                                DiceType = DiceType.One
                            },
                            m_Buff = claws_buff.ToReference<BlueprintBuffReference>()
                        }
                    );
                });
            });

            var bite_ability = claws_ability.CreateCopy(Main.HaddeqiModContext, guid_name + "BiteAbility", bp => {
                bp.m_Icon = icon;
                bp.SetName(name + " (Bite)");
                bp.SetDescription(description);
                bp.RemoveComponents<AbilityEffectRunAction>();
                bp.AddComponent<AbilityEffectRunAction>(c => {
                    c.Actions = Helpers.CreateActionList(
                        new ContextActionApplyBuff()
                        {
                            IsNotDispelable = true,
                            DurationValue = new ContextDurationValue()
                            {
                                Rate = DurationRate.Minutes,
                                BonusValue = new ContextValue()
                                {
                                    ValueType = ContextValueType.Rank
                                },
                                DiceCountValue = new ContextValue(),
                                DiceType = DiceType.One
                            },
                            m_Buff = bite_buff.ToReference<BlueprintBuffReference>()
                        }
                    );
                });
            });

            exploit = Helpers.CreateBlueprint<BlueprintFeature>(Main.HaddeqiModContext, guid_name + "ExploitFeature", bp => {
                bp.IsClassFeature = true;
                bp.HideInUI = true;
                bp.ReapplyOnLevelUp = true;
                bp.Ranks = 1;
                bp.m_Icon = icon;
                bp.SetName(name);
                bp.SetDescription(description);
                bp.AddComponent<AddFacts>(c => {
                    c.m_Facts = new BlueprintUnitFactReference[] {
                        claws_ability.ToReference<BlueprintUnitFactReference>(),
                        bite_ability.ToReference<BlueprintUnitFactReference>(),
                    };
                });
            });



            FeatTools.AddAsArcanistExploit(exploit);
            var extra_exploit = BlueprintTools.GetBlueprint<BlueprintFeatureSelection>("8ecee479c6d04c73926c4d95345b9314");
            extra_exploit.AddFeatures(exploit);

        }


    }
}
