using Epic.OnlineServices;
using HarmonyLib;
using System.Collections.Generic;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.Classes.Selection;
using Kingmaker.Blueprints.Classes;
using Kingmaker.Designers.EventConditionActionSystem.Actions;
using Kingmaker.Enums;
using Kingmaker.RuleSystem;
using Kingmaker.UnitLogic.Abilities.Blueprints;
using Kingmaker.UnitLogic.Abilities.Components;
using Kingmaker.UnitLogic.FactLogic;
using Kingmaker.UnitLogic.Mechanics.Actions;
using Kingmaker.UnitLogic.Mechanics.Components;
using Kingmaker.UnitLogic.Mechanics;
using TabletopTweaks.Core.ModLogic;
using TabletopTweaks.Core.Utilities;
using static UnityModManagerNet.UnityModManager;
using System.Linq;
using Kingmaker.Blueprints.Classes.Prerequisites;
using Kingmaker.Designers.Mechanics.Facts;
using Kingmaker.Utility;
using Kingmaker.Blueprints.Items.Weapons;
using Kingmaker.Designers.Mechanics.Buffs;
using Kingmaker.UnitLogic.Buffs.Blueprints;
using UnityEngine;
using Kingmaker.EntitySystem.Stats;
using OccultistArcanist.Engine.WizardSchools;

namespace OccultistArcanist.NewContent.ArcanistExploits
{
    public static class SchoolUnderstanding
    {
        static BlueprintCharacterClass arcanist_class = BlueprintTools.GetBlueprint<BlueprintCharacterClass>("52dbfd8505e22f84fad8d702611f60b7");
        static BlueprintFeatureSelection exploit;

        static string guid_name = "SchoolUnderstandingExploit";
        static string name = "School Understanding";
        static string description = "The arcanist can select one arcane school from any of the schools available to a character with the arcane school wizard class feature, but does not have to select any opposition schools.\n" +
            "As a swift action, the arcanist can expend 1 point from her arcane reservoir to bolster her understanding, allowing her to gain 1st-level school abilities and treat her arcanist level as her wizard level for the purpose of using these ability for a number of rounds equal to her Charisma modifier (minimum 1).\n" +
            "The arcanist uses her Charisma modifier in place of her Intelligence modifier for these abilities.";

        static Sprite icon = AssetLoader.LoadInternal(Main.HaddeqiModContext, folder: "Icons", file: "Metamixing.png");
        static internal void load()
        {
            var arcane_reservoir_resource = BlueprintTools.GetBlueprint<BlueprintAbilityResource>("cac948cbbe79b55459459dd6a8fe44ce");

            exploit = Helpers.CreateBlueprint<BlueprintFeatureSelection>(Main.HaddeqiModContext, guid_name + "Selection", bp => {
                bp.m_Icon = icon;
                bp.SetName(name);
                bp.SetDescription(description);
                bp.AddPrerequisite<PrerequisiteNoArchetype>(c => {
                    c.m_CharacterClass = arcanist_class.ToReference<BlueprintCharacterClassReference>();
                    c.m_Archetype = NewArchetypes.SchoolSavant.archetype.ToReference<BlueprintArchetypeReference>();
                });
                bp.AddPrerequisite<PrerequisiteNoFeature>(c => {
                    c.m_Feature = bp.ToReference<BlueprintFeatureReference>();
                });
            });


            var abjuration = new AbjurationSchool(arcanist_class, false, "SchoolUnderstanding", true, false, StatType.Charisma);
            var conjuration = new ConjurationSchool(arcanist_class, false, "SchoolUnderstanding", true, false, StatType.Charisma);
            var divination = new DivinationSchool(arcanist_class, false, "SchoolUnderstanding", true, false, StatType.Charisma);
            var enchantment = new EnchantmentSchool(arcanist_class, false, "SchoolUnderstanding", true, false, StatType.Charisma);
            var evocation = new EvocationSchool(arcanist_class, false, "SchoolUnderstanding", true, false, StatType.Charisma);
            var illusion = new IllusionSchool(arcanist_class, false, "SchoolUnderstanding", true, false, StatType.Charisma);
            var necromancy = new NecromancySchool(arcanist_class, false, "SchoolUnderstanding", true, false, StatType.Charisma);
            var transmutation = new TransmutationSchool(arcanist_class, false, "SchoolUnderstanding", true, false, StatType.Charisma);

            exploit.m_AllFeatures = new BlueprintFeatureReference[]
            {
                createSchoolUnderstanding(abjuration.first_feature, abjuration.school_used.ToString(), abjuration.wizard_school_progression).ToReference<BlueprintFeatureReference>(),
                createSchoolUnderstanding(conjuration.first_feature, conjuration.school_used.ToString(), conjuration.wizard_school_progression).ToReference<BlueprintFeatureReference>(),
                createSchoolUnderstanding(divination.first_feature, divination.school_used.ToString(), divination.wizard_school_progression).ToReference<BlueprintFeatureReference>(),
                createSchoolUnderstanding(enchantment.first_feature, enchantment.school_used.ToString(), enchantment.wizard_school_progression).ToReference<BlueprintFeatureReference>(),
                createSchoolUnderstanding(evocation.first_feature, evocation.school_used.ToString(), evocation.wizard_school_progression).ToReference<BlueprintFeatureReference>(),
                createSchoolUnderstanding(illusion.first_feature, illusion.school_used.ToString(), illusion.wizard_school_progression).ToReference<BlueprintFeatureReference>(),
                createSchoolUnderstanding(necromancy.first_feature, necromancy.school_used.ToString(), necromancy.wizard_school_progression).ToReference<BlueprintFeatureReference>(),
                createSchoolUnderstanding(transmutation.first_feature, transmutation.school_used.ToString(), transmutation.wizard_school_progression).ToReference<BlueprintFeatureReference>(),
            };


            FeatTools.AddAsArcanistExploit(exploit);
            var extra_exploit = BlueprintTools.GetBlueprint<BlueprintFeatureSelection>("8ecee479c6d04c73926c4d95345b9314");
            extra_exploit.AddFeatures(exploit);
        }



        static internal BlueprintFeature createSchoolUnderstanding(BlueprintFeature school_power, string school_name, BlueprintProgression school_progression)
        {
            school_power.SetNameDescription("School Understanding (" + school_progression.Name + ")",
                school_progression.Name + ": " + school_progression.Description);

            school_power.m_Icon = school_progression.m_Icon;

            return school_power;
        }

    }
}
